{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "covid-reporting-adf-499"
		},
		"trigger_properties_event trigger_parameters_file": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"trigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/95fe97d2-392b-4dc9-9831-ca3acc26eb05/resourceGroups/covidreporting-rg/providers/Microsoft.Storage/storageAccounts/datalakecovid"
		},
		"StockTrigger_properties_pl_stock_market_parameters_TableName": {
			"type": "string",
			"defaultValue": "stockdata"
		},
		"StockTrigger_properties_pl_stock_market_parameters_Schema": {
			"type": "string",
			"defaultValue": "stock"
		},
		"StockTrigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/95fe97d2-392b-4dc9-9831-ca3acc26eb05/resourceGroups/covidreporting-rg/providers/Microsoft.Storage/storageAccounts/datalakecovid"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/sql_stock_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_covid",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table": {
						"type": "String"
					},
					"schema": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "event trigger",
							"type": "PipelineReference"
						},
						"parameters": {
							"file": "[parameters('trigger_properties_event trigger_parameters_file')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/raw/blobs/ecdc/cases/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('trigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_casesdeaths')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy cases deaths data from git",
						"description": "",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_https_cases_deaths",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_cases_deaths_raw_csv_dl",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CasesDeaths"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-18T09:39:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_covidreporting')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data into ADLS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"maxConcurrentConnections": 0
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_population_raw_gz",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adlf_covidreportingdl",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CasesDeaths"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-18T09:39:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_stock_market')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyStock",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_stock_data_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sql_stock_data",
								"type": "DatasetReference",
								"parameters": {
									"table": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"schema": {
										"value": "@pipeline().parameters.Schema",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TableName": {
						"type": "String"
					},
					"Schema": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Test"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sql_stock_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_cases_deaths_load')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_cases_deaths_csv",
								"type": "DatasetReference"
							},
							"name": "CasesDeathsUKStream"
						},
						{
							"dataset": {
								"referenceName": "ds_ablob_country_lookup",
								"type": "DatasetReference"
							},
							"name": "CountryLookup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_adls_cases_deaths_sink",
								"type": "DatasetReference"
							},
							"name": "CasesDeathsSink"
						}
					],
					"transformations": [
						{
							"name": "SelectandRenameRequiredColums"
						},
						{
							"name": "FilterIIndAfg"
						},
						{
							"name": "lookupcountrycode"
						},
						{
							"name": "selectrequiredcolumns"
						},
						{
							"name": "casesanddeathscount"
						},
						{
							"name": "selectfinaldata"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          country_code as string,",
						"          continent as string,",
						"          population as integer,",
						"          indicator as string,",
						"          daily_count as short,",
						"          date as date,",
						"          rate_14_day as double,",
						"          source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CasesDeathsUKStream",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CountryLookup",
						"CasesDeathsUKStream select(mapColumn(",
						"          country,",
						"          country_code,",
						"          population,",
						"          indicator,",
						"          daily_count,",
						"          reporting_date = date,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectandRenameRequiredColums",
						"SelectandRenameRequiredColums filter(country=='Afghanistan' || country == 'India') ~> FilterIIndAfg",
						"FilterIIndAfg, CountryLookup lookup(SelectandRenameRequiredColums@country == CountryLookup@country,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupcountrycode",
						"lookupcountrycode select(mapColumn(",
						"          country = SelectandRenameRequiredColums@country,",
						"          country_code,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population = SelectandRenameRequiredColums@population,",
						"          indicator,",
						"          daily_count,",
						"          reporting_date,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectrequiredcolumns",
						"selectrequiredcolumns pivot(groupBy(country,",
						"          country_code,",
						"          population,",
						"          reporting_date,",
						"          source,",
						"          country_code_2_digit,",
						"          country_code_3_digit),",
						"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
						"     count = sum(daily_count),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> casesanddeathscount",
						"casesanddeathscount select(mapColumn(",
						"          country,",
						"          country_code,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          {confirmed cases_count},",
						"          deaths_count,",
						"          reporting_date,",
						"          population,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectfinaldata",
						"selectfinaldata sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CasesDeathsSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_load_hospital_admission_data')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls_hospital_admission_csv",
								"type": "DatasetReference"
							},
							"name": "HospitalAdmissionSource"
						},
						{
							"dataset": {
								"referenceName": "ds_ablob_country_lookup",
								"type": "DatasetReference"
							},
							"name": "CountryLookup"
						},
						{
							"dataset": {
								"referenceName": "ds_adls_dim_date_csv",
								"type": "DatasetReference"
							},
							"name": "DimDateSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_transformed_file_csv",
								"type": "DatasetReference"
							},
							"name": "SinkDailyHospitalAdmission"
						},
						{
							"dataset": {
								"referenceName": "ds_transformed_file_csv",
								"type": "DatasetReference"
							},
							"name": "SinkWeeklyHospitalAdmission"
						}
					],
					"transformations": [
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "CountrycodeLookup"
						},
						{
							"name": "SelectRequiredColumns2"
						},
						{
							"name": "DailyFile"
						},
						{
							"name": "PivotDaily"
						},
						{
							"name": "SelectRequiredColumns3"
						},
						{
							"name": "AggDimDate"
						},
						{
							"name": "JoinDimDate"
						},
						{
							"name": "pivot1"
						},
						{
							"name": "selectFinalFilelds"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          indicator as string,",
						"          date as date,",
						"          year_week as string,",
						"          value as integer,",
						"          source as string,",
						"          url as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> HospitalAdmissionSource",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CountryLookup",
						"source(output(",
						"          date_key as string,",
						"          date as string,",
						"          year as string,",
						"          month as string,",
						"          day as string,",
						"          day_name as string,",
						"          day_of_year as string,",
						"          week_of_month as string,",
						"          week_of_year as string,",
						"          month_name as string,",
						"          year_month as string,",
						"          year_week as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DimDateSource",
						"HospitalAdmissionSource select(mapColumn(",
						"          country,",
						"          indicator,",
						"          reported_date = date,",
						"          year_week,",
						"          value,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRequiredColumns",
						"SelectRequiredColumns, CountryLookup lookup(SelectRequiredColumns@country == CountryLookup@country,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> CountrycodeLookup",
						"CountrycodeLookup select(mapColumn(",
						"          country = SelectRequiredColumns@country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_date,",
						"          indicator,",
						"          year_week,",
						"          value,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRequiredColumns2",
						"SelectRequiredColumns2 split(indicator == 'Daily hospital occupancy' || indicator == 'Daily ICU occupancy',",
						"     disjoint: false) ~> DailyFile@(DailyFile, WeeklyFile)",
						"DailyFile@DailyFile pivot(groupBy(country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_date,",
						"          year_week,",
						"          source),",
						"     pivotBy(indicator, ['Daily ICU occupancy', 'Daily hospital occupancy']),",
						"     count = sum(value),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> PivotDaily",
						"PivotDaily select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_date,",
						"          Daily_hospital_occupancy_count = {Daily hospital occupancy_count},",
						"          Daily_ICU_occupancy_count = {Daily ICU occupancy_count},",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRequiredColumns3",
						"DimDateSource aggregate(groupBy(ecdc_year_week = left(year_week,4)+'-W'+right(year_week,2)),",
						"     week_start_date = min(date),",
						"          week_end_date = max(date)) ~> AggDimDate",
						"DailyFile@WeeklyFile, AggDimDate join(year_week == ecdc_year_week,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinDimDate",
						"JoinDimDate pivot(groupBy(country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_date,",
						"          year_week,",
						"          ecdc_year_week,",
						"          source,",
						"          week_start_date,",
						"          week_end_date),",
						"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
						"     count = sum(value),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> pivot1",
						"pivot1 select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_date,",
						"          ecdc_year_week,",
						"          week_start_date,",
						"          week_end_date,",
						"          new_hospital_occupency_count = {Weekly new hospital admissions per 100k_count},",
						"          new_ICU_occupency_count = {Weekly new ICU admissions per 100k_count},",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFinalFilelds",
						"SelectRequiredColumns3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['TransformedDailyFile'],",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkDailyHospitalAdmission",
						"selectFinalFilelds sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     filePattern:'TransformedWeeklyFile',",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkWeeklyHospitalAdmission"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_cases_deaths_pop')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DFCasesDeaths",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_cases_deaths_load",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CasesDeathsUKStream": {},
									"CountryLookup": {},
									"CasesDeathsSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CasesDeaths"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-18T09:39:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_cases_deaths_load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_load_hospital_admission_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_load_hospital_admission_data",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"HospitalAdmissionSource": {},
									"CountryLookup": {},
									"DimDateSource": {},
									"SinkDailyHospitalAdmission": {
										"filepath": {
											"value": "@pipeline().parameters.dailyFilePath",
											"type": "Expression"
										}
									},
									"SinkWeeklyHospitalAdmission": {
										"filepath": {
											"value": "@pipeline().parameters.weeklyFilePath",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"dailyFilePath": {
						"type": "string"
					},
					"weeklyFilePath": {
						"type": "string"
					}
				},
				"folder": {
					"name": "HospitalAdmissions"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-18T10:59:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_load_hospital_admission_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StockTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "trigger the stock copy activity when stock file is available",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_stock_market",
							"type": "PipelineReference"
						},
						"parameters": {
							"TableName": "[parameters('StockTrigger_properties_pl_stock_market_parameters_TableName')]",
							"Schema": "[parameters('StockTrigger_properties_pl_stock_market_parameters_Schema')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/raw/blobs/stocks/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('StockTrigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_stock_market')]"
			]
		}
	]
}