{
	"name": "df_cases_deaths_load",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_cases_deaths_csv",
						"type": "DatasetReference"
					},
					"name": "CasesDeathsUKStream"
				},
				{
					"dataset": {
						"referenceName": "ds_ablob_country_lookup",
						"type": "DatasetReference"
					},
					"name": "CountryLookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_adls_cases_deaths_sink",
						"type": "DatasetReference"
					},
					"name": "CasesDeathsSink"
				}
			],
			"transformations": [
				{
					"name": "SelectandRenameRequiredColums"
				},
				{
					"name": "FilterIIndAfg"
				},
				{
					"name": "lookupcountrycode"
				},
				{
					"name": "selectrequiredcolumns"
				},
				{
					"name": "casesanddeathscount"
				},
				{
					"name": "selectfinaldata"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as integer,",
				"          indicator as string,",
				"          daily_count as short,",
				"          date as date,",
				"          rate_14_day as double,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CasesDeathsUKStream",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountryLookup",
				"CasesDeathsUKStream select(mapColumn(",
				"          country,",
				"          country_code,",
				"          population,",
				"          indicator,",
				"          daily_count,",
				"          reporting_date = date,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectandRenameRequiredColums",
				"SelectandRenameRequiredColums filter(country=='Afghanistan' || country == 'India') ~> FilterIIndAfg",
				"FilterIIndAfg, CountryLookup lookup(SelectandRenameRequiredColums@country == CountryLookup@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupcountrycode",
				"lookupcountrycode select(mapColumn(",
				"          country = SelectandRenameRequiredColums@country,",
				"          country_code,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population = SelectandRenameRequiredColums@population,",
				"          indicator,",
				"          daily_count,",
				"          reporting_date,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectrequiredcolumns",
				"selectrequiredcolumns pivot(groupBy(country,",
				"          country_code,",
				"          population,",
				"          reporting_date,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit),",
				"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
				"     count = sum(daily_count),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> casesanddeathscount",
				"casesanddeathscount select(mapColumn(",
				"          country,",
				"          country_code,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          {confirmed cases_count},",
				"          deaths_count,",
				"          reporting_date,",
				"          population,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectfinaldata",
				"selectfinaldata sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CasesDeathsSink"
			]
		}
	}
}